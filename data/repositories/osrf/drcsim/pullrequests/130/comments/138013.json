{"links": {"self": {"href": "data/repositories/osrf/drcsim/pullrequests/130/comments/138013.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/diff/osrf/drcsim:0a3397b0459f..c69ecab26a55?path=ros%2Fatlas_msgs%2FAtlasPlugin.cpp"}, "html": {"href": "#!/osrf/drcsim/pull-requests/130/_/diff#comment-138013"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/osrf/drcsim/pullrequests/130.json"}, "html": {"href": "#!/osrf/drcsim/pull-requests/130"}}, "title": "add integral tie-back term issue #92"}, "content": {"raw": "This is correct, and deals with the issues I raised, but I wonder if this formulation will be confusing to future readers. I have included a suggested clarifcation below, along with changes to code to address two points.\n\n1) I think you should probably use the i_effort_min/max terms to allow the user to eliminate integral term altogether.\n2) If the current ki gain term is zero, we may want to skip this tie back under the assumption that user is not wanting to use integral gain.\n\nMay I suggest\n\n```\n#!c++\n\n        // integral tie-back during control saturation if using integral gain\n        if (!math::equal(forceClamped,forceUnclamped) && !math::equal(this->jointCommands.ki_position[i],0.0) )\n        { // lock integral term to provide continuous control as system moves out of staturation\n          this->errorTerms[i].k_i_q_i = math::clamp(\n                 (this->errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped)),\n          static_cast<double>(this->jointCommands.i_effort_min[i]),\n          static_cast<double>(this->jointCommands.i_effort_max[i]));\n         }\n\n```\n", "markup": "markdown", "html": "<p>This is correct, and deals with the issues I raised, but I wonder if this formulation will be confusing to future readers. I have included a suggested clarifcation below, along with changes to code to address two points.</p>\n<p>1) I think you should probably use the i_effort_min/max terms to allow the user to eliminate integral term altogether.\n2) If the current ki gain term is zero, we may want to skip this tie back under the assumption that user is not wanting to use integral gain.</p>\n<p>May I suggest</p>\n<div class=\"codehilite language-c++\"><pre><span></span>        <span class=\"c1\">// integral tie-back during control saturation if using integral gain</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"n\">forceClamped</span><span class=\"p\">,</span><span class=\"n\">forceUnclamped</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">jointCommands</span><span class=\"p\">.</span><span class=\"n\">ki_position</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"mf\">0.0</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n        <span class=\"p\">{</span> <span class=\"c1\">// lock integral term to provide continuous control as system moves out of staturation</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">errorTerms</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">k_i_q_i</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">clamp</span><span class=\"p\">(</span>\n                 <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">errorTerms</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">k_i_q_i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">forceClamped</span> <span class=\"o\">-</span> <span class=\"n\">forceUnclamped</span><span class=\"p\">)),</span>\n          <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">jointCommands</span><span class=\"p\">.</span><span class=\"n\">i_effort_min</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n          <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">jointCommands</span><span class=\"p\">.</span><span class=\"n\">i_effort_max</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]));</span>\n         <span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2013-03-03T02:14:48.332667+00:00", "user": {"display_name": "David Conner", "uuid": "{4375dc4a-9371-4c51-973e-1f1d045590c5}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4375dc4a-9371-4c51-973e-1f1d045590c5%7D"}, "html": {"href": "https://bitbucket.org/%7B4375dc4a-9371-4c51-973e-1f1d045590c5%7D/"}, "avatar": {"href": "https://bitbucket.org/account/dcconner/avatar/"}}, "nickname": "dcconner", "type": "user", "account_id": null}, "inline": {"to": 833, "from": null, "outdated": true, "path": "ros/atlas_msgs/AtlasPlugin.cpp"}, "updated_on": "2013-03-03T02:33:01.016522+00:00", "type": "pullrequest_comment", "id": 138013}