{"links": {"self": {"href": "data/repositories/osrf/drcsim/pullrequests/125/comments/122244.json"}, "html": {"href": "#!/osrf/drcsim/pull-requests/125/_/diff#comment-122244"}}, "parent": {"id": 122221, "links": {"self": {"href": "data/repositories/osrf/drcsim/pullrequests/125/comments/122221.json"}, "html": {"href": "#!/osrf/drcsim/pull-requests/125/_/diff#comment-122221"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 125, "links": {"self": {"href": "data/repositories/osrf/drcsim/pullrequests/125.json"}, "html": {"href": "#!/osrf/drcsim/pull-requests/125"}}, "title": "unthrottle ros controller update rates for the multicamera to prevent mismatch between gazebo image rates and ros image publish rates."}, "content": {"raw": "``camera_info`` and ``image_raw`` is synchronized in drivers for real cameras as it's simply published alongside the image in the frame grabber callback using ``image_transport::CameraPublisher``which takes both the image and the camera info as arguments for publishing (e.g. ``image_pub_.publish(image, ci);`` in ``camera1394``). \n\nPublishing it every simulation step instead of just when an image gets published isn't really a problem as there will always be a ``camera_info`` with a timestamp that corresponds to the image (image processing nodes usually require synchronized camera_info - image pairs) but only publishing it with the image would save you from spamming all this data at 1kHz (as you correctly pointed out it does not change often).", "markup": "markdown", "html": "<p><code>camera_info</code> and <code>image_raw</code> is synchronized in drivers for real cameras as it's simply published alongside the image in the frame grabber callback using <code>image_transport::CameraPublisher</code>which takes both the image and the camera info as arguments for publishing (e.g. <code>image_pub_.publish(image, ci);</code> in <code>camera1394</code>). </p>\n<p>Publishing it every simulation step instead of just when an image gets published isn't really a problem as there will always be a <code>camera_info</code> with a timestamp that corresponds to the image (image processing nodes usually require synchronized camera_info - image pairs) but only publishing it with the image would save you from spamming all this data at 1kHz (as you correctly pointed out it does not change often).</p>", "type": "rendered"}, "created_on": "2013-02-18T21:03:58.795877+00:00", "user": {"display_name": "Thomas Koletschka", "uuid": "{b33092ac-6376-48d1-9803-d9e6de445d1a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D"}, "html": {"href": "https://bitbucket.org/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D/"}, "avatar": {"href": "https://bitbucket.org/account/thomasko/avatar/"}}, "nickname": "thomasko", "type": "user", "account_id": null}, "updated_on": "2013-02-18T21:03:58.911580+00:00", "type": "pullrequest_comment", "id": 122244}