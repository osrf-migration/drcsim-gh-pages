{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/2984231.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-2984231"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": "Simulation is meant to be a stand-in for the physical system, with which you can't run synchronously.  So we don't support writing ROS controller nodes that run in that way.  If you really want to run synchronously with simulation, then your code needs to be inside a Gazebo plugin, where you can do whatever you want, while time is frozen.\n\nOn a related note, drcsim 2.0, expected soon, will include UDP-based control via ROS that our internal testing suggests will support pretty high control rates (higher than your 200Hz).", "markup": "markdown", "html": "<p>Simulation is meant to be a stand-in for the physical system, with which you can't run synchronously.  So we don't support writing ROS controller nodes that run in that way.  If you really want to run synchronously with simulation, then your code needs to be inside a Gazebo plugin, where you can do whatever you want, while time is frozen.</p>\n<p>On a related note, drcsim 2.0, expected soon, will include UDP-based control via ROS that our internal testing suggests will support pretty high control rates (higher than your 200Hz).</p>", "type": "rendered"}, "created_on": "2013-01-30T02:27:00.228999+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2013-01-30T02:29:13.739183+00:00", "type": "issue_comment", "id": 2984231}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/2984371.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-2984371"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": "Let me rephrase the problem a bit. On our physical robots, we run a real time OS and our control loop is guaranteed to be run at (in our case) x Hz, with the restriction that our control loop finishes in less than 1/x seconds. It is also guaranteed that sensors are read and control signals applied at every tick.\n\nThe simulation is not guaranteed to run real time, especially not on all our development computers. That means that, even if we use a realtime system to guarantee a x Hz loop rate for our control, the effective loop rate in the simulation is not constant. Furthermore, udp packets are not guaranteed to be delivered, and do not neccesarly arrive in order. \n\nSo maybe synchronous control is a misnomer, but we would like to have a guaranteed loop rate of our controller with respect to simulation time. \n\nOur algorithms are based on force control of the robot instead of position control, so we cannot use the builtin pid controllers(which i assume are updated with a constant loop rate with respect to the simulation)", "markup": "markdown", "html": "<p>Let me rephrase the problem a bit. On our physical robots, we run a real time OS and our control loop is guaranteed to be run at (in our case) x Hz, with the restriction that our control loop finishes in less than 1/x seconds. It is also guaranteed that sensors are read and control signals applied at every tick.</p>\n<p>The simulation is not guaranteed to run real time, especially not on all our development computers. That means that, even if we use a realtime system to guarantee a x Hz loop rate for our control, the effective loop rate in the simulation is not constant. Furthermore, udp packets are not guaranteed to be delivered, and do not neccesarly arrive in order. </p>\n<p>So maybe synchronous control is a misnomer, but we would like to have a guaranteed loop rate of our controller with respect to simulation time. </p>\n<p>Our algorithms are based on force control of the robot instead of position control, so we cannot use the builtin pid controllers(which i assume are updated with a constant loop rate with respect to the simulation)</p>", "type": "rendered"}, "created_on": "2013-01-30T02:47:16.307935+00:00", "user": {"display_name": "Jesper Smith", "uuid": "{61d9fe7d-e554-408c-99fb-faefa9c96114}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D"}, "html": {"href": "https://bitbucket.org/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/56b6560717cfbb0f4a2cc0af6e638650d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJS-4.png"}}, "nickname": "jespersmith", "type": "user", "account_id": "557058:2e842f1c-d9d5-48b1-88ae-5dd9e81a6f77"}, "updated_on": "2013-01-30T02:48:29.515325+00:00", "type": "issue_comment", "id": 2984371}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/3139069.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-3139069"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": "Does this mean that a type of real-time/deterministic controller will be included in the next release? To my knowledge the older PR2 controller manager implementation did not have the issue mentioned by Jesper.", "markup": "markdown", "html": "<p>Does this mean that a type of real-time/deterministic controller will be included in the next release? To my knowledge the older PR2 controller manager implementation did not have the issue mentioned by Jesper.</p>", "type": "rendered"}, "created_on": "2013-02-14T22:19:52.464438+00:00", "user": {"display_name": "Isura", "uuid": "{8e49d2f4-e17c-48c5-b0e9-a250978f0d12}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8e49d2f4-e17c-48c5-b0e9-a250978f0d12%7D"}, "html": {"href": "https://bitbucket.org/%7B8e49d2f4-e17c-48c5-b0e9-a250978f0d12%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a8dcd95034eb5d875267d3fc69b2bad6d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsI-3.png"}}, "nickname": "isura", "type": "user", "account_id": "557058:c7aec2ca-4717-47cc-a16c-5251f3c3a646"}, "updated_on": null, "type": "issue_comment", "id": 3139069}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/3149536.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-3149536"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2013-02-15T23:29:59.264187+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3149536}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/3216903.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-3216903"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": "Hi Jesper,\nIs your controller tolerant to any kind of jitter in update rate at all?  Is there a way to make it tolerant to jitters in the update loop, so that a command update is late once in a while?  If so, can you characterize what kind of latency is tolerable?  If not, we'll have to find ways to create synchronous communication between sim machine and field computer.\nJohn", "markup": "markdown", "html": "<p>Hi Jesper,\nIs your controller tolerant to any kind of jitter in update rate at all?  Is there a way to make it tolerant to jitters in the update loop, so that a command update is late once in a while?  If so, can you characterize what kind of latency is tolerable?  If not, we'll have to find ways to create synchronous communication between sim machine and field computer.\nJohn</p>", "type": "rendered"}, "created_on": "2013-02-23T03:22:24.490030+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3216903}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/3222300.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-3222300"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": "John,\n\nAs our software is currently implemented, we are not tolerant to any kind of jitter. With some work we could make it tolerant to a little jitter. However, more critical is guaranteed maximum delay between the simulated time that the controller gets state information to the simulated time that the control action based on that state is applied to the simulator. For more detail on that request please see our DRC forum post: https://www.theroboticschallenge.org/forum/default.aspx?Function_fst=ViewThread&ThreadID_fin=161\n\nAlso it's pretty critical that state readings are received in order and that control actions are applied in order.\n\nBoth the maximum lag guarantees and the ordering can be achieved with synchronous communication between simulation and field computer. A real simple TCP direct socket connection between the simulator and the field computer could achieve that really easily. That might make it harder to get the sim to run in real time, but there are more fundamental things going on (such as numerical instability of the dynamics engine) that likely will make the sim not be able to run real time anyway.\n\n- Jerry, Twan, and Jesper from IHMC Team", "markup": "markdown", "html": "<p>John,</p>\n<p>As our software is currently implemented, we are not tolerant to any kind of jitter. With some work we could make it tolerant to a little jitter. However, more critical is guaranteed maximum delay between the simulated time that the controller gets state information to the simulated time that the control action based on that state is applied to the simulator. For more detail on that request please see our DRC forum post: <a href=\"https://www.theroboticschallenge.org/forum/default.aspx?Function_fst=ViewThread&amp;ThreadID_fin=161\" rel=\"nofollow\" class=\"ap-connect-link\">https://www.theroboticschallenge.org/forum/default.aspx?Function_fst=ViewThread&amp;ThreadID_fin=161</a></p>\n<p>Also it's pretty critical that state readings are received in order and that control actions are applied in order.</p>\n<p>Both the maximum lag guarantees and the ordering can be achieved with synchronous communication between simulation and field computer. A real simple TCP direct socket connection between the simulator and the field computer could achieve that really easily. That might make it harder to get the sim to run in real time, but there are more fundamental things going on (such as numerical instability of the dynamics engine) that likely will make the sim not be able to run real time anyway.</p>\n<ul>\n<li>Jerry, Twan, and Jesper from IHMC Team</li>\n</ul>", "type": "rendered"}, "created_on": "2013-02-24T01:51:17.679041+00:00", "user": {"display_name": "Twan Koolen", "uuid": "{2d5c2bff-dbd5-48c6-9467-a28e598f2ad2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2d5c2bff-dbd5-48c6-9467-a28e598f2ad2%7D"}, "html": {"href": "https://bitbucket.org/%7B2d5c2bff-dbd5-48c6-9467-a28e598f2ad2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/c9a855f23543778ac9e3536505f615d3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsTK-3.png"}}, "nickname": "tkoolen", "type": "user", "account_id": "5b9ac9a79d17912bf10b2b7e"}, "updated_on": "2013-02-24T18:51:06.803806+00:00", "type": "issue_comment", "id": 3222300}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/3529156.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-3529156"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2013-03-26T18:08:51.085871+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3529156}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/3608339.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-3608339"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": "We created a plugin for our use that does basically what we want. It uses protobuff for communication using a simple boost TCP server. Commands are received asynchronously, while state updates are send synchronous. If no packet is received, the plugin re-uses the torque commands from the previous control tick. \n\nWe have tried to make it slightly efficient (using unordered_maps instead of getJoint to resolve jointnames for example), but we haven't profiled and tested it thoroughly yet.\n\nFor debugging, several cheat options are available that can be disabled using defines in the source file\n- Wait for packet, useful for step debugging\n- Receive true world state (robot pose)\n- Setting joint angles (for rewinding the simulation in combination with our controller)\n\nThe plugin itself is in csrc/GazeboStateCommunicator.cc, listening on port 1234.\n\nIt works in tandem with a simple world controller plugin to pause, rewind and resume the simulation. This plugin is in csrc/SimpleWorldPlugin.cc, listening on port 1235.\n\nThe protocol buffers are defined in RobotCommand.proto for torque commands, RobotState.proto for the robot state messages and SimpleWorldControl.proto for gazebo commands. Messages are written to the TCP socket using writeDelimitedTo(included in java protobuffers, simple C++ implementation in ProtoParser.cc) and read using readDelimitedFrom (also included in java protobuffers, simple C++ implementation in ProtoParser.cc)\n\nWe made some launch files in launch/ to start the qualifications.\n\nI've shared the source on bitBucket. The java classes in src are for our own controller and do not work stand alone (but might give an example how to use it).\n\nhttps://bitbucket.org/jespersmith/gazebostatecommunicator/\n\n", "markup": "markdown", "html": "<p>We created a plugin for our use that does basically what we want. It uses protobuff for communication using a simple boost TCP server. Commands are received asynchronously, while state updates are send synchronous. If no packet is received, the plugin re-uses the torque commands from the previous control tick. </p>\n<p>We have tried to make it slightly efficient (using unordered_maps instead of getJoint to resolve jointnames for example), but we haven't profiled and tested it thoroughly yet.</p>\n<p>For debugging, several cheat options are available that can be disabled using defines in the source file\n- Wait for packet, useful for step debugging\n- Receive true world state (robot pose)\n- Setting joint angles (for rewinding the simulation in combination with our controller)</p>\n<p>The plugin itself is in csrc/GazeboStateCommunicator.cc, listening on port 1234.</p>\n<p>It works in tandem with a simple world controller plugin to pause, rewind and resume the simulation. This plugin is in csrc/SimpleWorldPlugin.cc, listening on port 1235.</p>\n<p>The protocol buffers are defined in RobotCommand.proto for torque commands, RobotState.proto for the robot state messages and SimpleWorldControl.proto for gazebo commands. Messages are written to the TCP socket using writeDelimitedTo(included in java protobuffers, simple C++ implementation in ProtoParser.cc) and read using readDelimitedFrom (also included in java protobuffers, simple C++ implementation in ProtoParser.cc)</p>\n<p>We made some launch files in launch/ to start the qualifications.</p>\n<p>I've shared the source on bitBucket. The java classes in src are for our own controller and do not work stand alone (but might give an example how to use it).</p>\n<p><a href=\"https://bitbucket.org/jespersmith/gazebostatecommunicator/\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/jespersmith/gazebostatecommunicator/</a></p>", "type": "rendered"}, "created_on": "2013-04-03T15:42:47.416725+00:00", "user": {"display_name": "Jesper Smith", "uuid": "{61d9fe7d-e554-408c-99fb-faefa9c96114}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D"}, "html": {"href": "https://bitbucket.org/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/56b6560717cfbb0f4a2cc0af6e638650d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJS-4.png"}}, "nickname": "jespersmith", "type": "user", "account_id": "557058:2e842f1c-d9d5-48b1-88ae-5dd9e81a6f77"}, "updated_on": null, "type": "issue_comment", "id": 3608339}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/3626146.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-3626146"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": "Just saw that the repo was private, it is public now.", "markup": "markdown", "html": "<p>Just saw that the repo was private, it is public now.</p>", "type": "rendered"}, "created_on": "2013-04-04T22:35:08.060880+00:00", "user": {"display_name": "Jesper Smith", "uuid": "{61d9fe7d-e554-408c-99fb-faefa9c96114}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D"}, "html": {"href": "https://bitbucket.org/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/56b6560717cfbb0f4a2cc0af6e638650d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJS-4.png"}}, "nickname": "jespersmith", "type": "user", "account_id": "557058:2e842f1c-d9d5-48b1-88ae-5dd9e81a6f77"}, "updated_on": null, "type": "issue_comment", "id": 3626146}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101/comments/3945217.json"}, "html": {"href": "#!/osrf/drcsim/issues/101#comment-3945217"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/101.json"}}, "type": "issue", "id": 101, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide synchronous control"}, "content": {"raw": "pull request #249", "markup": "markdown", "html": "<p><a href=\"#!/osrf/drcsim/pull-requests/249/synchronized-lock-step-control\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #249</a></p>", "type": "rendered"}, "created_on": "2013-05-02T19:49:22.298869+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3945217}], "page": 1, "size": 10}