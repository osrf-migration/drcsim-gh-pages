{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3970528.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3970528"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "is it reasonable to make sure `k_i_q_i` has the same sign as `forceClamped`?\n\n~~~\n    // integral tie-back during control saturation if using integral gain\n    if (!math::equal(forceClamped,forceUnclamped) &&\n        !math::equal((double)this->atlasState.ki_position[i],0.0) )\n    {\n      // lock integral term to provide continuous control as system moves\n      // out of staturation.  But make sure k_i_q_i has the same sign\n      // as forceClamped, i.e. k_i_q_i does not clamp the wrong direction.\n      if (forceClamped > 0.0)\n        this->errorTerms[i].k_i_q_i = math::clamp(\n          this->errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n          0.0,\n          static_cast<double>(this->atlasState.i_effort_max[i]));\n      else\n        this->errorTerms[i].k_i_q_i = math::clamp(\n          this->errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n          static_cast<double>(this->atlasState.i_effort_min[i]),\n          0.0);\n    }\n~~~", "markup": "markdown", "html": "<p>is it reasonable to make sure <code>k_i_q_i</code> has the same sign as <code>forceClamped</code>?</p>\n<div class=\"codehilite\"><pre><span></span>    // integral tie-back during control saturation if using integral gain\n    if (!math::equal(forceClamped,forceUnclamped) &amp;&amp;\n        !math::equal((double)this-&gt;atlasState.ki_position[i],0.0) )\n    {\n      // lock integral term to provide continuous control as system moves\n      // out of staturation.  But make sure k_i_q_i has the same sign\n      // as forceClamped, i.e. k_i_q_i does not clamp the wrong direction.\n      if (forceClamped &gt; 0.0)\n        this-&gt;errorTerms[i].k_i_q_i = math::clamp(\n          this-&gt;errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n          0.0,\n          static_cast&lt;double&gt;(this-&gt;atlasState.i_effort_max[i]));\n      else\n        this-&gt;errorTerms[i].k_i_q_i = math::clamp(\n          this-&gt;errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n          static_cast&lt;double&gt;(this-&gt;atlasState.i_effort_min[i]),\n          0.0);\n    }\n</pre></div>", "type": "rendered"}, "created_on": "2013-05-06T03:33:53.204060+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3970528}