{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3963847.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3963847"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "Here is how I would implement it.  I used the inverted logic so that tie-back would be enabled if the bool was 0 / false.  I think this would be most likely to leave it on for current users who didn't initialize the value.  The only change in AtlasPlugin.cpp was the addition of the first if statement.  The message would need a new bool.\n\n```\n#!c++\n\n\tif (!this->atlasCommand.disableIntegralTieback)\n\t{\n          // integral tie-back during control saturation if using integral gain\n          if (!math::equal(forceClamped,forceUnclamped) &&\n              !math::equal((double)this->atlasState.ki_position[i],0.0) )\n          {\n            // lock integral term to provide continuous control as system moves\n            // out of staturation\n            this->errorTerms[i].k_i_q_i = math::clamp(\n              this->errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n            static_cast<double>(this->atlasState.i_effort_min[i]),\n            static_cast<double>(this->atlasState.i_effort_max[i]));\n          }\n\t}\n```", "markup": "markdown", "html": "<p>Here is how I would implement it.  I used the inverted logic so that tie-back would be enabled if the bool was 0 / false.  I think this would be most likely to leave it on for current users who didn't initialize the value.  The only change in AtlasPlugin.cpp was the addition of the first if statement.  The message would need a new bool.</p>\n<div class=\"codehilite language-c++\"><pre><span></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">atlasCommand</span><span class=\"p\">.</span><span class=\"n\">disableIntegralTieback</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n          <span class=\"c1\">// integral tie-back during control saturation if using integral gain</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"n\">forceClamped</span><span class=\"p\">,</span><span class=\"n\">forceUnclamped</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n              <span class=\"o\">!</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">equal</span><span class=\"p\">((</span><span class=\"kt\">double</span><span class=\"p\">)</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">atlasState</span><span class=\"p\">.</span><span class=\"n\">ki_position</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"mf\">0.0</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n          <span class=\"p\">{</span>\n            <span class=\"c1\">// lock integral term to provide continuous control as system moves</span>\n            <span class=\"c1\">// out of staturation</span>\n            <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">errorTerms</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">k_i_q_i</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">clamp</span><span class=\"p\">(</span>\n              <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">errorTerms</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">k_i_q_i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">forceClamped</span> <span class=\"o\">-</span> <span class=\"n\">forceUnclamped</span><span class=\"p\">),</span>\n            <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">atlasState</span><span class=\"p\">.</span><span class=\"n\">i_effort_min</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n            <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">atlasState</span><span class=\"p\">.</span><span class=\"n\">i_effort_max</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]));</span>\n          <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2013-05-04T22:29:57.508670+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3963847}