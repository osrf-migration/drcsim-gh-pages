{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3980848.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3980848"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "I would like to put some specific numbers to this discussion.  The gains for the shx joint are set to p= 500, i = 100, i_limit = 170, d=20 and all arm joint angles are set to zero.  A downward step of 0.1 radians is commanded to the shx joint.  With the current tie-back the arm will shoot up by 0.15 radians before going to the commanded position (bad as it goes the opposite direction of the command!).  With the proposed tie-back algorithm the joint overshoots to 0.25 radians before recovering to the commanded position (bad as the overshoot is larger than the entire commanded change).  With tie-back disabled (the desired case) the joint overshoots to 0.15 radians before settling to the desired state.  Current tie-back causes a nasty joint reversal in the case.  The proposed tie-back causes a 3x worse overshoot than the desired capability to disable tie-back.", "markup": "markdown", "html": "<p>I would like to put some specific numbers to this discussion.  The gains for the shx joint are set to p= 500, i = 100, i_limit = 170, d=20 and all arm joint angles are set to zero.  A downward step of 0.1 radians is commanded to the shx joint.  With the current tie-back the arm will shoot up by 0.15 radians before going to the commanded position (bad as it goes the opposite direction of the command!).  With the proposed tie-back algorithm the joint overshoots to 0.25 radians before recovering to the commanded position (bad as the overshoot is larger than the entire commanded change).  With tie-back disabled (the desired case) the joint overshoots to 0.15 radians before settling to the desired state.  Current tie-back causes a nasty joint reversal in the case.  The proposed tie-back causes a 3x worse overshoot than the desired capability to disable tie-back.</p>", "type": "rendered"}, "created_on": "2013-05-06T21:34:37.927358+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3980848}