{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3688229.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3688229"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "This code is generally intended to prevent integral wind up in the same direction as the joint command is saturated, and provide continuous control as the system moves out of saturation.  If the very large step change in the opposite direction causes saturation the other way, then I could see this \"inverting\" the integral term, and causing overshooting if the integral gain is relatively small.\n\nThe large step changes sounds more like a bang/bang style of control; do you need the integral term at all in those conditions?  This code is only active if the integral term is non-zero and can be further limited by the i_limits.\n\nRemoving the clamping will cause a different set of control issues for those using integral control.  That said, since I first made this suggestion, we have moved away from using integral control and will do so in limited situations.\n\nA compromise would be to have a parameter that allows the user to turn clamping on or off for the system\n\n\n\n\n", "markup": "markdown", "html": "<p>This code is generally intended to prevent integral wind up in the same direction as the joint command is saturated, and provide continuous control as the system moves out of saturation.  If the very large step change in the opposite direction causes saturation the other way, then I could see this \"inverting\" the integral term, and causing overshooting if the integral gain is relatively small.</p>\n<p>The large step changes sounds more like a bang/bang style of control; do you need the integral term at all in those conditions?  This code is only active if the integral term is non-zero and can be further limited by the i_limits.</p>\n<p>Removing the clamping will cause a different set of control issues for those using integral control.  That said, since I first made this suggestion, we have moved away from using integral control and will do so in limited situations.</p>\n<p>A compromise would be to have a parameter that allows the user to turn clamping on or off for the system</p>", "type": "rendered"}, "created_on": "2013-04-10T02:32:39.500238+00:00", "user": {"display_name": "David Conner", "uuid": "{4375dc4a-9371-4c51-973e-1f1d045590c5}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4375dc4a-9371-4c51-973e-1f1d045590c5%7D"}, "html": {"href": "https://bitbucket.org/%7B4375dc4a-9371-4c51-973e-1f1d045590c5%7D/"}, "avatar": {"href": "https://bitbucket.org/account/dcconner/avatar/"}}, "nickname": "dcconner", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 3688229}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3688445.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3688445"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "It was pretty easy to hit this even with a step of 0.1 radians on the shoulder / shx joint.  p= 500, i = 100, i_limit = 170, d=20.  Given that it was so easy to hit with a relatively small step, I don't think it should always be on.  Your suggestion to allow disabling it seems very reasonable.", "markup": "markdown", "html": "<p>It was pretty easy to hit this even with a step of 0.1 radians on the shoulder / shx joint.  p= 500, i = 100, i_limit = 170, d=20.  Given that it was so easy to hit with a relatively small step, I don't think it should always be on.  Your suggestion to allow disabling it seems very reasonable.</p>", "type": "rendered"}, "created_on": "2013-04-10T03:19:24.387101+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3688445}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3688634.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3688634"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "A comment on the severity - we are able to compile libAtlasPlugin.so to work around this.", "markup": "markdown", "html": "<p>A comment on the severity - we are able to compile libAtlasPlugin.so to work around this.</p>", "type": "rendered"}, "created_on": "2013-04-10T03:59:21.992208+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3688634}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3945167.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3945167"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "Hi @gorobotgo,\n\ncan you share your diff of AtlasPlugin?\n\nthanks.", "markup": "markdown", "html": "<p>Hi @gorobotgo,</p>\n<p>can you share your diff of AtlasPlugin?</p>\n<p>thanks.</p>", "type": "rendered"}, "created_on": "2013-05-02T19:43:43.637252+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3945167}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3963810.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3963810"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "I have the diff below, but all I did was comment out the integral tie-back section.\nIf you added a bool to AtlasCommand you could globally enable/disable the integral tie-back in AtlasPlugin.cpp  (below is the diff for version 2.5.2)\ndiff AtlasPlugin.cpp AtlasPlugin.cpp.orig \n1386d1385\n< \t/*\n1398d1396\n< \t*/\n", "markup": "markdown", "html": "<p>I have the diff below, but all I did was comment out the integral tie-back section.\nIf you added a bool to AtlasCommand you could globally enable/disable the integral tie-back in AtlasPlugin.cpp  (below is the diff for version 2.5.2)\ndiff AtlasPlugin.cpp AtlasPlugin.cpp.orig \n<a href=\"#!/osrf/drcsim/commits/1386d1385\" rel=\"nofollow\" class=\"ap-connect-link\">1386d1385</a>\n&lt;   /<em>\n<a href=\"#!/osrf/drcsim/commits/1398d1396\" rel=\"nofollow\" class=\"ap-connect-link\">1398d1396</a>\n&lt;   </em>/</p>", "type": "rendered"}, "created_on": "2013-05-04T22:19:04.058747+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3963810}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3963847.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3963847"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "Here is how I would implement it.  I used the inverted logic so that tie-back would be enabled if the bool was 0 / false.  I think this would be most likely to leave it on for current users who didn't initialize the value.  The only change in AtlasPlugin.cpp was the addition of the first if statement.  The message would need a new bool.\n\n```\n#!c++\n\n\tif (!this->atlasCommand.disableIntegralTieback)\n\t{\n          // integral tie-back during control saturation if using integral gain\n          if (!math::equal(forceClamped,forceUnclamped) &&\n              !math::equal((double)this->atlasState.ki_position[i],0.0) )\n          {\n            // lock integral term to provide continuous control as system moves\n            // out of staturation\n            this->errorTerms[i].k_i_q_i = math::clamp(\n              this->errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n            static_cast<double>(this->atlasState.i_effort_min[i]),\n            static_cast<double>(this->atlasState.i_effort_max[i]));\n          }\n\t}\n```", "markup": "markdown", "html": "<p>Here is how I would implement it.  I used the inverted logic so that tie-back would be enabled if the bool was 0 / false.  I think this would be most likely to leave it on for current users who didn't initialize the value.  The only change in AtlasPlugin.cpp was the addition of the first if statement.  The message would need a new bool.</p>\n<div class=\"codehilite language-c++\"><pre><span></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">atlasCommand</span><span class=\"p\">.</span><span class=\"n\">disableIntegralTieback</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n          <span class=\"c1\">// integral tie-back during control saturation if using integral gain</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"n\">forceClamped</span><span class=\"p\">,</span><span class=\"n\">forceUnclamped</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n              <span class=\"o\">!</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">equal</span><span class=\"p\">((</span><span class=\"kt\">double</span><span class=\"p\">)</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">atlasState</span><span class=\"p\">.</span><span class=\"n\">ki_position</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"mf\">0.0</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n          <span class=\"p\">{</span>\n            <span class=\"c1\">// lock integral term to provide continuous control as system moves</span>\n            <span class=\"c1\">// out of staturation</span>\n            <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">errorTerms</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">k_i_q_i</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">clamp</span><span class=\"p\">(</span>\n              <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">errorTerms</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">k_i_q_i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">forceClamped</span> <span class=\"o\">-</span> <span class=\"n\">forceUnclamped</span><span class=\"p\">),</span>\n            <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">atlasState</span><span class=\"p\">.</span><span class=\"n\">i_effort_min</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n            <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">atlasState</span><span class=\"p\">.</span><span class=\"n\">i_effort_max</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]));</span>\n          <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2013-05-04T22:29:57.508670+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3963847}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3970528.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3970528"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "is it reasonable to make sure `k_i_q_i` has the same sign as `forceClamped`?\n\n~~~\n    // integral tie-back during control saturation if using integral gain\n    if (!math::equal(forceClamped,forceUnclamped) &&\n        !math::equal((double)this->atlasState.ki_position[i],0.0) )\n    {\n      // lock integral term to provide continuous control as system moves\n      // out of staturation.  But make sure k_i_q_i has the same sign\n      // as forceClamped, i.e. k_i_q_i does not clamp the wrong direction.\n      if (forceClamped > 0.0)\n        this->errorTerms[i].k_i_q_i = math::clamp(\n          this->errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n          0.0,\n          static_cast<double>(this->atlasState.i_effort_max[i]));\n      else\n        this->errorTerms[i].k_i_q_i = math::clamp(\n          this->errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n          static_cast<double>(this->atlasState.i_effort_min[i]),\n          0.0);\n    }\n~~~", "markup": "markdown", "html": "<p>is it reasonable to make sure <code>k_i_q_i</code> has the same sign as <code>forceClamped</code>?</p>\n<div class=\"codehilite\"><pre><span></span>    // integral tie-back during control saturation if using integral gain\n    if (!math::equal(forceClamped,forceUnclamped) &amp;&amp;\n        !math::equal((double)this-&gt;atlasState.ki_position[i],0.0) )\n    {\n      // lock integral term to provide continuous control as system moves\n      // out of staturation.  But make sure k_i_q_i has the same sign\n      // as forceClamped, i.e. k_i_q_i does not clamp the wrong direction.\n      if (forceClamped &gt; 0.0)\n        this-&gt;errorTerms[i].k_i_q_i = math::clamp(\n          this-&gt;errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n          0.0,\n          static_cast&lt;double&gt;(this-&gt;atlasState.i_effort_max[i]));\n      else\n        this-&gt;errorTerms[i].k_i_q_i = math::clamp(\n          this-&gt;errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n          static_cast&lt;double&gt;(this-&gt;atlasState.i_effort_min[i]),\n          0.0);\n    }\n</pre></div>", "type": "rendered"}, "created_on": "2013-05-06T03:33:53.204060+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3970528}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3977816.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3977816"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "That solves about 2/3 of the problem for us.  It no longer causes an inversion of the k_i_q_i term and a wild swing in the wrong direction.  So, it is definitely an improvement.  It still zeroes out the k_i_q_i term which can cause overshoot.\n\nIn an example case - the arm joints angles are zero (arm straight out at side).  The steady state k_i_q_i term for the l_arm_shx joint is about 60.  If you make a step change to 0.1 (down) the tie-back will be activated unless kd_position is less than 1.7.  The proposed tie-back will zero k_i_q_i.  Without the integral term holding the arm up, the down motion will overshoot and then recover as k_i_q_i comes back up to about 60.\n\nI don't know enough about the normal use cases for tie-back to know if this change would impact that.\n\nOur preference would be to have the ability to disable tie-back, but the proposed change certainly improves the behavior for us.", "markup": "markdown", "html": "<p>That solves about 2/3 of the problem for us.  It no longer causes an inversion of the k_i_q_i term and a wild swing in the wrong direction.  So, it is definitely an improvement.  It still zeroes out the k_i_q_i term which can cause overshoot.</p>\n<p>In an example case - the arm joints angles are zero (arm straight out at side).  The steady state k_i_q_i term for the l_arm_shx joint is about 60.  If you make a step change to 0.1 (down) the tie-back will be activated unless kd_position is less than 1.7.  The proposed tie-back will zero k_i_q_i.  Without the integral term holding the arm up, the down motion will overshoot and then recover as k_i_q_i comes back up to about 60.</p>\n<p>I don't know enough about the normal use cases for tie-back to know if this change would impact that.</p>\n<p>Our preference would be to have the ability to disable tie-back, but the proposed change certainly improves the behavior for us.</p>", "type": "rendered"}, "created_on": "2013-05-06T16:57:29.826270+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3977816}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3979703.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3979703"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "the overshoot you describe is a proper response of a standard integral term; in fact, with the tie-back, the overshoot due to integral term should be less than the result of a standard integral term implementation without tie-back.", "markup": "markdown", "html": "<p>the overshoot you describe is a proper response of a standard integral term; in fact, with the tie-back, the overshoot due to integral term should be less than the result of a standard integral term implementation without tie-back.</p>", "type": "rendered"}, "created_on": "2013-05-06T19:48:29.646036+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3979703}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3980168.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3980168"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "In the case I describe the overshoot is increased due to tie-back.  The arm's weight is being supported by the integral term.  When a command is sent to lower the arm the integral tie-back zeroes out the integral term.  Both gravity and the actuator are accelerating the arm downward and it overshoots an order of magnitude more than if tie-back is disabled.  If tie-back is disabled the integral term reduces slightly during the short movement, but still continues to support the arm and their is little overshoot in lowering the arm.", "markup": "markdown", "html": "<p>In the case I describe the overshoot is increased due to tie-back.  The arm's weight is being supported by the integral term.  When a command is sent to lower the arm the integral tie-back zeroes out the integral term.  Both gravity and the actuator are accelerating the arm downward and it overshoots an order of magnitude more than if tie-back is disabled.  If tie-back is disabled the integral term reduces slightly during the short movement, but still continues to support the arm and their is little overshoot in lowering the arm.</p>", "type": "rendered"}, "created_on": "2013-05-06T20:29:15.863990+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3980168}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/3980848.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-3980848"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "I would like to put some specific numbers to this discussion.  The gains for the shx joint are set to p= 500, i = 100, i_limit = 170, d=20 and all arm joint angles are set to zero.  A downward step of 0.1 radians is commanded to the shx joint.  With the current tie-back the arm will shoot up by 0.15 radians before going to the commanded position (bad as it goes the opposite direction of the command!).  With the proposed tie-back algorithm the joint overshoots to 0.25 radians before recovering to the commanded position (bad as the overshoot is larger than the entire commanded change).  With tie-back disabled (the desired case) the joint overshoots to 0.15 radians before settling to the desired state.  Current tie-back causes a nasty joint reversal in the case.  The proposed tie-back causes a 3x worse overshoot than the desired capability to disable tie-back.", "markup": "markdown", "html": "<p>I would like to put some specific numbers to this discussion.  The gains for the shx joint are set to p= 500, i = 100, i_limit = 170, d=20 and all arm joint angles are set to zero.  A downward step of 0.1 radians is commanded to the shx joint.  With the current tie-back the arm will shoot up by 0.15 radians before going to the commanded position (bad as it goes the opposite direction of the command!).  With the proposed tie-back algorithm the joint overshoots to 0.25 radians before recovering to the commanded position (bad as the overshoot is larger than the entire commanded change).  With tie-back disabled (the desired case) the joint overshoots to 0.15 radians before settling to the desired state.  Current tie-back causes a nasty joint reversal in the case.  The proposed tie-back causes a 3x worse overshoot than the desired capability to disable tie-back.</p>", "type": "rendered"}, "created_on": "2013-05-06T21:34:37.927358+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": null, "type": "issue_comment", "id": 3980848}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/4010345.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-4010345"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "couple of options here:\n\n  1. remove integral tie-back (pull request #272).\n  1. make sure integral tie-back does not flip sign of integral force term `k_i_q_i` (pull request #273).\n\nI'll merge which pull request with more votes.\n\nJohn", "markup": "markdown", "html": "<p>couple of options here:</p>\n<ol>\n<li>remove integral tie-back (<a href=\"#!/osrf/drcsim/pull-requests/272/fix-for-issue-182-remove-integral-tie-back\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #272</a>).</li>\n<li>make sure integral tie-back does not flip sign of integral force term <code>k_i_q_i</code> (<a href=\"#!/osrf/drcsim/pull-requests/273/option-for-issue-182-modified-integral-tie\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #273</a>).</li>\n</ol>\n<p>I'll merge which pull request with more votes.</p>\n<p>John</p>", "type": "rendered"}, "created_on": "2013-05-09T02:56:43.089689+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 4010345}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/4015843.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-4015843"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "I vote for choice number 1.  (big surprise :-)\n", "markup": "markdown", "html": "<p>I vote for choice number 1.  (big surprise :-)</p>", "type": "rendered"}, "created_on": "2013-05-09T14:23:50.288919+00:00", "user": {"display_name": "GoRobotGo", "uuid": "{2fd8dac8-286d-461a-b7dd-dba99deea025}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D"}, "html": {"href": "https://bitbucket.org/%7B2fd8dac8-286d-461a-b7dd-dba99deea025%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6431739b101c18640b5a84d359fdd274d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-4.png"}}, "nickname": "GoRobotGo", "type": "user", "account_id": "557058:44b40072-c04b-41ae-ad09-376db9ebffa1"}, "updated_on": "2013-05-09T20:06:06.454090+00:00", "type": "issue_comment", "id": 4015843}, {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182/comments/4083448.json"}, "html": {"href": "#!/osrf/drcsim/issues/182#comment-4083448"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}}, "type": "issue", "id": 182, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches"}, "content": {"raw": "Resolved in pull request #272", "markup": "markdown", "html": "<p>Resolved in <a href=\"#!/osrf/drcsim/pull-requests/272/fix-for-issue-182-remove-integral-tie-back\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #272</a></p>", "type": "rendered"}, "created_on": "2013-05-14T21:05:30.814296+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 4083448}], "page": 1, "size": 14}