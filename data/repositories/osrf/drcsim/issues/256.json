{"priority": "blocker", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "links": {"attachments": {"href": "data/repositories/osrf/drcsim/issues/256/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/drcsim/issues/256.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/256/watch"}, "comments": {"href": "data/repositories/osrf/drcsim/issues/256/comments_page=1.json"}, "html": {"href": "#!/osrf/drcsim/issues/256/gpu-lidar-timestamp-does-not-correspond"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/256/vote"}}, "reporter": {"display_name": "Jesper Smith", "uuid": "{61d9fe7d-e554-408c-99fb-faefa9c96114}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D"}, "html": {"href": "https://bitbucket.org/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/56b6560717cfbb0f4a2cc0af6e638650d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJS-4.png"}}, "nickname": "jespersmith", "type": "user", "account_id": "557058:2e842f1c-d9d5-48b1-88ae-5dd9e81a6f77"}, "title": "GPU Lidar timestamp does not correspond with robot state", "component": null, "votes": 0, "watches": 2, "content": {"raw": "After the recent change to the GPU lidar, the timestamp of the lidar scan does not correspond with the state of the robot anymore. \r\n\r\nUsing the ROS layer, we estimate the state of the robot and build a grid based on that showing the world. We created a simple test world (GazeboWorld.png) to show the issue.\r\n\r\nWith the old LIDAR scan, we are able to reconstruct a flat ground (see RaylidarGUIFlatGround.png), however with the new GPU Lidar the ground plane is tilted (GPURayLidarGUIFlatGround.png). Maximum tilt due spindle rotation is probably around 1/(40 Hz) * 5 rad/s = 0.125 rad, leading to an offset of 625mm at 5m distance.\r\n\r\n\r\nWe have seen the same issue when we simulate the LIDAR in our simulation software, and the solution was to determine the timestamp and the LIDAR transform to world (used to determine the origin of the scan) at the same time (blocking the simulation when doing this). Actually, in our simulation software we calculate the lidar transform and timestamp in the simulation thread and then notify the render thread to make the scan (while this could lead to a slightly outdated world, at least the timestamp is correct).\r\n\r\nNote: Since the last updates I'm running at a realtime factor of 0.10 ~ 0.20 when the controller, sim and UI are running on my computer. Running at a realtime factor near 1.0 could mask this issue, but does not solve the issue and could lead to problems when the simulation rate drops during a run. ", "markup": "markdown", "html": "<p>After the recent change to the GPU lidar, the timestamp of the lidar scan does not correspond with the state of the robot anymore. </p>\n<p>Using the ROS layer, we estimate the state of the robot and build a grid based on that showing the world. We created a simple test world (GazeboWorld.png) to show the issue.</p>\n<p>With the old LIDAR scan, we are able to reconstruct a flat ground (see RaylidarGUIFlatGround.png), however with the new GPU Lidar the ground plane is tilted (GPURayLidarGUIFlatGround.png). Maximum tilt due spindle rotation is probably around 1/(40 Hz) * 5 rad/s = 0.125 rad, leading to an offset of 625mm at 5m distance.</p>\n<p>We have seen the same issue when we simulate the LIDAR in our simulation software, and the solution was to determine the timestamp and the LIDAR transform to world (used to determine the origin of the scan) at the same time (blocking the simulation when doing this). Actually, in our simulation software we calculate the lidar transform and timestamp in the simulation thread and then notify the render thread to make the scan (while this could lead to a slightly outdated world, at least the timestamp is correct).</p>\n<p>Note: Since the last updates I'm running at a realtime factor of 0.10 ~ 0.20 when the controller, sim and UI are running on my computer. Running at a realtime factor near 1.0 could mask this issue, but does not solve the issue and could lead to problems when the simulation rate drops during a run. </p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2013-05-07T16:31:40.256472+00:00", "milestone": null, "updated_on": "2013-05-08T15:51:11.249112+00:00", "type": "issue", "id": 256}