{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/132/comments/3252036.json"}, "html": {"href": "#!/osrf/drcsim/issues/132#comment-3252036"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/132.json"}}, "type": "issue", "id": 132, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "joint command message not interpreted properly"}, "content": {"raw": "This is an open topic pending more testing on communication speeds on the cloud machines.   For now, please develop against joint commands with exactly 28 elements in arrays within [JointCommands.msg](#!/osrf/osrf-common/src/68a4f8258eac96042db21a3959c667821192d7b1/ros/osrf_msgs/msg/JointCommands.msg?at=default) messages, adhering strictly to the ordered joint list exactly as shown below:\n\n~~~\nback_lbz  = 0\nback_mby  = 1\nback_ubx  = 2\nneck_ay   = 3\nl_leg_uhz = 4\nl_leg_mhx = 5\nl_leg_lhy = 6\nl_leg_kny = 7\nl_leg_uay = 8\nl_leg_lax = 9\nr_leg_uhz = 10\nr_leg_mhx = 11\nr_leg_lhy = 12\nr_leg_kny = 13\nr_leg_uay = 14\nr_leg_lax = 15\nl_arm_usy = 16\nl_arm_shx = 17\nl_arm_ely = 18\nl_arm_elx = 19\nl_arm_uwy = 20\nl_arm_mwx = 21\nr_arm_usy = 22\nr_arm_shx = 23\nr_arm_ely = 24\nr_arm_elx = 25\nr_arm_uwy = 26\nr_arm_mwx = 27\n~~~\n\n`JointCommands.name` fields will not be used at all until further update.\n\nNote it is ok to leave arrays empty (e.g. you should probably leave the name array empty for now).  Any array in the `JointCommands` message left empty will be treated as \"use the last available set of values\".\n\nIf name mapping efficiency is not an issue, we may add the name mapping feature in subsequent releases.\n\nAlso, as suggested, we can add an `int32[] index` array and an enum list mapping joint names to id's\n\n~~~\nint32 back_lbz  = 0\nint32 back_mby  = 1\nint32 back_ubx  = 2\nint32 neck_ay   = 3\nint32 l_leg_uhz = 4\nint32 l_leg_mhx = 5\nint32 l_leg_lhy = 6\nint32 l_leg_kny = 7\nint32 l_leg_uay = 8\nint32 l_leg_lax = 9\nint32 r_leg_uhz = 10\nint32 r_leg_mhx = 11\nint32 r_leg_lhy = 12\nint32 r_leg_kny = 13\nint32 r_leg_uay = 14\nint32 r_leg_lax = 15\nint32 l_arm_usy = 16\nint32 l_arm_shx = 17\nint32 l_arm_ely = 18\nint32 l_arm_elx = 19\nint32 l_arm_uwy = 20\nint32 l_arm_mwx = 21\nint32 r_arm_usy = 22\nint32 r_arm_shx = 23\nint32 r_arm_ely = 24\nint32 r_arm_elx = 25\nint32 r_arm_uwy = 26\nint32 r_arm_mwx = 27\n~~~\n\n", "markup": "markdown", "html": "<p>This is an open topic pending more testing on communication speeds on the cloud machines.   For now, please develop against joint commands with exactly 28 elements in arrays within <a data-is-external-link=\"true\" href=\"#!/osrf/osrf-common/src/68a4f8258eac96042db21a3959c667821192d7b1/ros/osrf_msgs/msg/JointCommands.msg?at=default\" rel=\"nofollow\">JointCommands.msg</a> messages, adhering strictly to the ordered joint list exactly as shown below:</p>\n<div class=\"codehilite\"><pre><span></span>back_lbz  = 0\nback_mby  = 1\nback_ubx  = 2\nneck_ay   = 3\nl_leg_uhz = 4\nl_leg_mhx = 5\nl_leg_lhy = 6\nl_leg_kny = 7\nl_leg_uay = 8\nl_leg_lax = 9\nr_leg_uhz = 10\nr_leg_mhx = 11\nr_leg_lhy = 12\nr_leg_kny = 13\nr_leg_uay = 14\nr_leg_lax = 15\nl_arm_usy = 16\nl_arm_shx = 17\nl_arm_ely = 18\nl_arm_elx = 19\nl_arm_uwy = 20\nl_arm_mwx = 21\nr_arm_usy = 22\nr_arm_shx = 23\nr_arm_ely = 24\nr_arm_elx = 25\nr_arm_uwy = 26\nr_arm_mwx = 27\n</pre></div>\n\n\n<p><code>JointCommands.name</code> fields will not be used at all until further update.</p>\n<p>Note it is ok to leave arrays empty (e.g. you should probably leave the name array empty for now).  Any array in the <code>JointCommands</code> message left empty will be treated as \"use the last available set of values\".</p>\n<p>If name mapping efficiency is not an issue, we may add the name mapping feature in subsequent releases.</p>\n<p>Also, as suggested, we can add an <code>int32[] index</code> array and an enum list mapping joint names to id's</p>\n<div class=\"codehilite\"><pre><span></span>int32 back_lbz  = 0\nint32 back_mby  = 1\nint32 back_ubx  = 2\nint32 neck_ay   = 3\nint32 l_leg_uhz = 4\nint32 l_leg_mhx = 5\nint32 l_leg_lhy = 6\nint32 l_leg_kny = 7\nint32 l_leg_uay = 8\nint32 l_leg_lax = 9\nint32 r_leg_uhz = 10\nint32 r_leg_mhx = 11\nint32 r_leg_lhy = 12\nint32 r_leg_kny = 13\nint32 r_leg_uay = 14\nint32 r_leg_lax = 15\nint32 l_arm_usy = 16\nint32 l_arm_shx = 17\nint32 l_arm_ely = 18\nint32 l_arm_elx = 19\nint32 l_arm_uwy = 20\nint32 l_arm_mwx = 21\nint32 r_arm_usy = 22\nint32 r_arm_shx = 23\nint32 r_arm_ely = 24\nint32 r_arm_elx = 25\nint32 r_arm_uwy = 26\nint32 r_arm_mwx = 27\n</pre></div>", "type": "rendered"}, "created_on": "2013-02-27T00:38:24.305759+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 3252036}