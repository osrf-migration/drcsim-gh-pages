{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "links": {"attachments": {"href": "data/repositories/osrf/drcsim/issues/76/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/drcsim/issues/76.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/76/watch"}, "comments": {"href": "data/repositories/osrf/drcsim/issues/76/comments_page=1.json"}, "html": {"href": "#!/osrf/drcsim/issues/76/multisense-plugin-resolution-update-rate"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/76/vote"}}, "reporter": {"display_name": "Thomas Koletschka", "uuid": "{b33092ac-6376-48d1-9803-d9e6de445d1a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D"}, "html": {"href": "https://bitbucket.org/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D/"}, "avatar": {"href": "https://bitbucket.org/account/thomasko/avatar/"}}, "nickname": "thomasko", "type": "user", "account_id": null}, "title": "multisense plugin (resolution, update rate, stereo alg, ...)", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Right now the MultiSenseSLPlugin only supports changing the update rate of the individual cameras but not their resolution (changing the update rate of individual cameras shouldn't be allowed either as they're supposed to be synchronized). \r\n\r\nThe MultiSense-SL head seems to support 3 different resolutions and color or monochrome mode at the moment:\r\n```\r\n- Left camera color image plus disparity, 24 bit RGB/BGR at 2048x1088 at 10.6 FPS, 2048x544 at 21.2 FPS, or 1024x544 at 42.4 FPS\r\n- Or Left camera monochrome image plus disparity, 8 bit at 2048x1088 at 15 FPS, 2048x544 at 30 FPS, or 1024x544 at 60 FPS\r\n```\r\nThe 4th resolution (VGA) listed in the public pdf is either missing in this list or not supported (yet).\r\n\r\n\r\nConsidering the \"left image + disparity\" note you might also want to move the disparity calculation inside the MultiSense plugin and  only publish left image + disparity if the MultiSense head only provides the left image and not both. Edit: I just checked with CR and they only return left+disparity due to bandwidth limitations so this should be done the same way on the simulated robot.\r\n\r\nMoving disparity calculation inside the MultiSense plugin would also make it easier for you to use a different stereo algorithm other than the current OpenCV CPU Block-Matching inside stereo_image_proc (e.g. OpenCV's Semi-Global Block Matching which would give results closer to MultiSense's Semi-Global Matching but would be quite slow for high resolutions, or OpenCV's GPU implementation of Block Matching to achieve a frame rate closer to MultiSense's ... maybe teams could be free to choose between a slower CPU based SGBM and a faster GPU BM given that both have trade-offs to the real MultiSense head ... unless you're able to come up with a GPU or \"fake\" implementation that is closer to MultiSense's SGM implementation both precision and speed wise).", "markup": "markdown", "html": "<p>Right now the MultiSenseSLPlugin only supports changing the update rate of the individual cameras but not their resolution (changing the update rate of individual cameras shouldn't be allowed either as they're supposed to be synchronized). </p>\n<p>The MultiSense-SL head seems to support 3 different resolutions and color or monochrome mode at the moment:</p>\n<div class=\"codehilite\"><pre><span></span>- Left camera color image plus disparity, 24 bit RGB/BGR at 2048x1088 at 10.6 FPS, 2048x544 at 21.2 FPS, or 1024x544 at 42.4 FPS\n- Or Left camera monochrome image plus disparity, 8 bit at 2048x1088 at 15 FPS, 2048x544 at 30 FPS, or 1024x544 at 60 FPS\n</pre></div>\n\n\n<p>The 4th resolution (VGA) listed in the public pdf is either missing in this list or not supported (yet).</p>\n<p>Considering the \"left image + disparity\" note you might also want to move the disparity calculation inside the MultiSense plugin and  only publish left image + disparity if the MultiSense head only provides the left image and not both. Edit: I just checked with CR and they only return left+disparity due to bandwidth limitations so this should be done the same way on the simulated robot.</p>\n<p>Moving disparity calculation inside the MultiSense plugin would also make it easier for you to use a different stereo algorithm other than the current OpenCV CPU Block-Matching inside stereo_image_proc (e.g. OpenCV's Semi-Global Block Matching which would give results closer to MultiSense's Semi-Global Matching but would be quite slow for high resolutions, or OpenCV's GPU implementation of Block Matching to achieve a frame rate closer to MultiSense's ... maybe teams could be free to choose between a slower CPU based SGBM and a faster GPU BM given that both have trade-offs to the real MultiSense head ... unless you're able to come up with a GPU or \"fake\" implementation that is closer to MultiSense's SGM implementation both precision and speed wise).</p>", "type": "rendered"}, "assignee": null, "state": "wontfix", "version": null, "edited_on": null, "created_on": "2012-12-28T10:38:46.332231+00:00", "milestone": null, "updated_on": "2013-11-14T22:19:21.689520+00:00", "type": "issue", "id": 76}