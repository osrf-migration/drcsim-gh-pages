{"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "links": {"attachments": {"href": "data/repositories/osrf/drcsim/issues/182/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/drcsim/issues/182.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/182/watch"}, "comments": {"href": "data/repositories/osrf/drcsim/issues/182/comments_page=1.json"}, "html": {"href": "#!/osrf/drcsim/issues/182/integral-tie-back-in-atlasplugincpp-seems"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/182/vote"}}, "reporter": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "title": "Integral tie-back in AtlasPlugin.cpp seems wrong - causes control glitches", "component": null, "votes": 0, "watches": 4, "content": {"raw": "Per [thread](http://answers.gazebosim.org/question/2309/integral-tie-back-in-atlasplugincpp-seems-wrong/),\r\n\r\nThe code at roughly [line 1066 in AtlasPlugin.cpp](#!/osrf/drcsim/src/084739a7530dd022180fee281b1d5ccffc6bbeb6/ros/atlas_msgs/AtlasPlugin.cpp?at=default#cl-1066) appears to be wrong. Specifically, it generally will invert the `kiq_i` term on a step change and saturate in the opposite of the commanded direction.\r\n\r\nIf a negative step is applied that results in a clamped force then the code can result in a `kiq_i` that is clamped at the positive limit. This results in a joint excursion in the opposite of the desired direction.\r\n\r\nThis is not a desired behavior. I would recommend simply removing the problematic code.\r\n\r\n~~~\r\n    // lock integral term to provide continuous control as system moves\r\n    // out of staturation\r\n    this->errorTerms[i].k_i_q_i = math::clamp(\r\n            this->errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\r\n~~~", "markup": "markdown", "html": "<p>Per <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/2309/integral-tie-back-in-atlasplugincpp-seems-wrong/\" rel=\"nofollow\">thread</a>,</p>\n<p>The code at roughly <a data-is-external-link=\"true\" href=\"#!/osrf/drcsim/src/084739a7530dd022180fee281b1d5ccffc6bbeb6/ros/atlas_msgs/AtlasPlugin.cpp?at=default#cl-1066\" rel=\"nofollow\">line 1066 in AtlasPlugin.cpp</a> appears to be wrong. Specifically, it generally will invert the <code>kiq_i</code> term on a step change and saturate in the opposite of the commanded direction.</p>\n<p>If a negative step is applied that results in a clamped force then the code can result in a <code>kiq_i</code> that is clamped at the positive limit. This results in a joint excursion in the opposite of the desired direction.</p>\n<p>This is not a desired behavior. I would recommend simply removing the problematic code.</p>\n<div class=\"codehilite\"><pre><span></span>    // lock integral term to provide continuous control as system moves\n    // out of staturation\n    this-&gt;errorTerms[i].k_i_q_i = math::clamp(\n            this-&gt;errorTerms[i].k_i_q_i + (forceClamped - forceUnclamped),\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2013-04-10T00:29:46.042545+00:00", "milestone": null, "updated_on": "2013-05-14T21:05:30.728727+00:00", "type": "issue", "id": 182}