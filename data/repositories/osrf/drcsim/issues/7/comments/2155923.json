{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/7/comments/2155923.json"}, "html": {"href": "#!/osrf/drcsim/issues/7#comment-2155923"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/7.json"}}, "type": "issue", "id": 7, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "rviz rosbag  playback issue"}, "content": {"raw": "The trick is to hit the \"Reset\" button in the lower-right corner of the rviz window (part of the Time display).  Then the robot model will start responding again.\n\nWhat's happening there is that rosbag, when playing in an infinite loop, is trying to keep the clock and data timestamps increasing, instead of resetting to zero periodically.  It does this by modifying top-level timestamps on outgoing messages, but that doesn't work for messages with timestamps embedded in the content.  Each tf message (http://www.ros.org/doc/api/tf/html/msg/tfMessage.html) is a list of timestamped transforms.  Those timestamps are not being modified.  As a result, rviz is getting what looks like new camera and laser data but old tf data, leaving it unable to update the kinematic state of the robot model.  Hitting \"Reset\" tells rviz to start over, specifically to reset its clock and wipe out tf buffers.\n\nThat's a long-winded way of saying that this behavior happens with ROS systems in general and that there isn't an universal fix for it.", "markup": "markdown", "html": "<p>The trick is to hit the \"Reset\" button in the lower-right corner of the rviz window (part of the Time display).  Then the robot model will start responding again.</p>\n<p>What's happening there is that rosbag, when playing in an infinite loop, is trying to keep the clock and data timestamps increasing, instead of resetting to zero periodically.  It does this by modifying top-level timestamps on outgoing messages, but that doesn't work for messages with timestamps embedded in the content.  Each tf message (<a href=\"http://www.ros.org/doc/api/tf/html/msg/tfMessage.html\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.ros.org/doc/api/tf/html/msg/tfMessage.html</a>) is a list of timestamped transforms.  Those timestamps are not being modified.  As a result, rviz is getting what looks like new camera and laser data but old tf data, leaving it unable to update the kinematic state of the robot model.  Hitting \"Reset\" tells rviz to start over, specifically to reset its clock and wipe out tf buffers.</p>\n<p>That's a long-winded way of saying that this behavior happens with ROS systems in general and that there isn't an universal fix for it.</p>", "type": "rendered"}, "created_on": "2012-10-14T18:32:58.487527+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": null, "type": "issue_comment", "id": 2155923}