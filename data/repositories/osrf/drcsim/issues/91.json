{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "links": {"attachments": {"href": "data/repositories/osrf/drcsim/issues/91/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/drcsim/issues/91.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/91/watch"}, "comments": {"href": "data/repositories/osrf/drcsim/issues/91/comments_page=1.json"}, "html": {"href": "#!/osrf/drcsim/issues/91/request-ability-to-reset-integral-term-in"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/91/vote"}}, "reporter": {"display_name": "DavidC", "uuid": "{fcd58e93-ca10-45f7-b2db-c913c5878cc3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfcd58e93-ca10-45f7-b2db-c913c5878cc3%7D"}, "html": {"href": "https://bitbucket.org/%7Bfcd58e93-ca10-45f7-b2db-c913c5878cc3%7D/"}, "avatar": {"href": "https://bitbucket.org/account/DavidC/avatar/"}}, "nickname": "DavidC", "type": "user", "account_id": null}, "title": "Request ability to reset integral term in JointCommand PID control", "component": null, "votes": 0, "watches": 2, "content": {"raw": "related to question http://answers.gazebosim.org/question/985/drcsim-five-related-questions-to-api-and/\r\n\r\nThe joint command message allows general PID control.\r\n\r\nI presume the code will be similar to :\r\n\r\n```\r\n#!c++\r\n\r\nerr = (position-measured_position);\r\nInt += ki*err*dt;\r\nInt = clamp(Int, min_effort, max_effort);\r\nOutput = effort + kp*err + Int + kd*(err - old_err)/dt + kp_vel*(velocity - measured_velocity);\r\nOutput = clamp(Output, min_effort, max_effort);\r\n```\r\n\r\nIn the event that we want to switch control modes, which is extremely likely for drcsim, we need a way to reset the internal integral term (\"Int\").\r\n\r\nAt a minimum, we should be able to zero out the integral term, but allowing arbitrary values is better IMHO.  This will allow a user to generate a \"bumpless\" control when switching control modes.\r\n\r\nOne challenge that I see it will be the need to coordinate this reset with a new joint command. \r\nResets will occur less frequently than regular joint commands, which points to making this a separate command but raises the issue of synchronization.\r\nOne might make a special service call that includes both joint command and reset message.  \r\nThis may also prove useful to avoid the issue of reset getting lost if multiple commands are received between simulation time steps due to asynchronous control updates.\r\n\r\n", "markup": "markdown", "html": "<p>related to question <a href=\"http://answers.gazebosim.org/question/985/drcsim-five-related-questions-to-api-and/\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org/question/985/drcsim-five-related-questions-to-api-and/</a></p>\n<p>The joint command message allows general PID control.</p>\n<p>I presume the code will be similar to :</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">position</span><span class=\"o\">-</span><span class=\"n\">measured_position</span><span class=\"p\">);</span>\n<span class=\"n\">Int</span> <span class=\"o\">+=</span> <span class=\"n\">ki</span><span class=\"o\">*</span><span class=\"n\">err</span><span class=\"o\">*</span><span class=\"n\">dt</span><span class=\"p\">;</span>\n<span class=\"n\">Int</span> <span class=\"o\">=</span> <span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">min_effort</span><span class=\"p\">,</span> <span class=\"n\">max_effort</span><span class=\"p\">);</span>\n<span class=\"n\">Output</span> <span class=\"o\">=</span> <span class=\"n\">effort</span> <span class=\"o\">+</span> <span class=\"n\">kp</span><span class=\"o\">*</span><span class=\"n\">err</span> <span class=\"o\">+</span> <span class=\"n\">Int</span> <span class=\"o\">+</span> <span class=\"n\">kd</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">err</span> <span class=\"o\">-</span> <span class=\"n\">old_err</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">dt</span> <span class=\"o\">+</span> <span class=\"n\">kp_vel</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">velocity</span> <span class=\"o\">-</span> <span class=\"n\">measured_velocity</span><span class=\"p\">);</span>\n<span class=\"n\">Output</span> <span class=\"o\">=</span> <span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">Output</span><span class=\"p\">,</span> <span class=\"n\">min_effort</span><span class=\"p\">,</span> <span class=\"n\">max_effort</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>In the event that we want to switch control modes, which is extremely likely for drcsim, we need a way to reset the internal integral term (\"Int\").</p>\n<p>At a minimum, we should be able to zero out the integral term, but allowing arbitrary values is better IMHO.  This will allow a user to generate a \"bumpless\" control when switching control modes.</p>\n<p>One challenge that I see it will be the need to coordinate this reset with a new joint command. \nResets will occur less frequently than regular joint commands, which points to making this a separate command but raises the issue of synchronization.\nOne might make a special service call that includes both joint command and reset message.<br />\nThis may also prove useful to avoid the issue of reset getting lost if multiple commands are received between simulation time steps due to asynchronous control updates.</p>", "type": "rendered"}, "assignee": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "state": "resolved", "version": {"name": "2.1.0", "links": {"self": {"href": "data/repositories/osrf/drcsim/versions/49845.json"}}}, "edited_on": null, "created_on": "2013-01-24T14:21:37.194409+00:00", "milestone": null, "updated_on": "2013-03-14T16:31:41.488439+00:00", "type": "issue", "id": 91}