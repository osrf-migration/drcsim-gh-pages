{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/373/comments/6480156.json"}, "html": {"href": "#!/osrf/drcsim/issues/373#comment-6480156"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/373.json"}}, "type": "issue", "id": 373, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Provide detailed release notes"}, "content": {"raw": "Further research showed that I can use xacro to create the model files in the following way\n\n\n```\n#!bash\nrobotdir=\"/opt/ros/groovy/share/atlas_description/robots/\"\nexport GAZEBO_MODEL_PATH=`pwd`/models:$GAZEBO_MODEL_PATH\nfor f in \"$robotdir\"/*.xacro\ndo\n        bzname=`basename \"$f\" .urdf.xacro`\n        mkdir -p models/\"$bzname\"\n        rosrun xacro xacro.py $f > models/\"$bzname\"/model.sdf\n        cp model.config.template models/\"$bzname\"/model.config\ndone\n```\n\nThen using an xslt file on the world file, we can reinsert the robot and create a complete file using gzsdf print for our simulator. ", "markup": "markdown", "html": "<p>Further research showed that I can use xacro to create the model files in the following way</p>\n<div class=\"codehilite language-bash\"><pre><span></span><span class=\"nv\">robotdir</span><span class=\"o\">=</span><span class=\"s2\">&quot;/opt/ros/groovy/share/atlas_description/robots/&quot;</span>\n<span class=\"nb\">export</span> <span class=\"nv\">GAZEBO_MODEL_PATH</span><span class=\"o\">=</span><span class=\"sb\">`</span><span class=\"nb\">pwd</span><span class=\"sb\">`</span>/models:<span class=\"nv\">$GAZEBO_MODEL_PATH</span>\n<span class=\"k\">for</span> f in <span class=\"s2\">&quot;</span><span class=\"nv\">$robotdir</span><span class=\"s2\">&quot;</span>/*.xacro\n<span class=\"k\">do</span>\n        <span class=\"nv\">bzname</span><span class=\"o\">=</span><span class=\"sb\">`</span>basename <span class=\"s2\">&quot;</span><span class=\"nv\">$f</span><span class=\"s2\">&quot;</span> .urdf.xacro<span class=\"sb\">`</span>\n        mkdir -p models/<span class=\"s2\">&quot;</span><span class=\"nv\">$bzname</span><span class=\"s2\">&quot;</span>\n        rosrun xacro xacro.py <span class=\"nv\">$f</span> &gt; models/<span class=\"s2\">&quot;</span><span class=\"nv\">$bzname</span><span class=\"s2\">&quot;</span>/model.sdf\n        cp model.config.template models/<span class=\"s2\">&quot;</span><span class=\"nv\">$bzname</span><span class=\"s2\">&quot;</span>/model.config\n<span class=\"k\">done</span>\n</pre></div>\n\n\n<p>Then using an xslt file on the world file, we can reinsert the robot and create a complete file using gzsdf print for our simulator. </p>", "type": "rendered"}, "created_on": "2013-10-15T19:41:54.893708+00:00", "user": {"display_name": "Jesper Smith", "uuid": "{61d9fe7d-e554-408c-99fb-faefa9c96114}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D"}, "html": {"href": "https://bitbucket.org/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/56b6560717cfbb0f4a2cc0af6e638650d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJS-4.png"}}, "nickname": "jespersmith", "type": "user", "account_id": "557058:2e842f1c-d9d5-48b1-88ae-5dd9e81a6f77"}, "updated_on": "2013-10-15T19:44:50.093366+00:00", "type": "issue_comment", "id": 6480156}