{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/193/comments/3770257.json"}, "html": {"href": "#!/osrf/drcsim/issues/193#comment-3770257"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/193.json"}}, "type": "issue", "id": 193, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Force Torque sensor does not give correct results for torque and is extremely noisy"}, "content": {"raw": "Rotating the test model by 90 degrees showed that world frame and after-joint-frame where mixed up in the force torque calculation. \n\n```\n<model name=\"box\">\n            <pose>0 0 0 0 0 1.57</pose>\n```\n\nIn OdeJoint.cc the wrench due the joint forces is calculated in world frame:\n\n\n```\n#!c++\n// get force applied through SetForce\n    physics::JointWrench wrenchAppliedWorld;\n    if (this->HasType(physics::Base::HINGE_JOINT))\n    {\n      // rotate force into child link frame\n      wrenchAppliedWorld.body2Torque =\n        this->GetForce(0u) * this->GetGlobalAxis(0u);\n      wrenchAppliedWorld.body1Torque = -wrenchAppliedWorld.body2Torque;\n    }\n    else if (this->HasType(physics::Base::SLIDER_JOINT))\n    {\n      // rotate force into child link frame\n      this->GetGlobalAxis(0u);\n      wrenchAppliedWorld.body2Force =\n        this->GetForce(0u) * this->GetGlobalAxis(0u);\n      wrenchAppliedWorld.body1Force = -wrenchAppliedWorld.body2Force;\n    }\n    else\n    {\n      /// \\TODO: fix for multi-axis joints\n      gzerr << \"force torque for joint type [\" << this->GetType()\n            << \"] not implemented, returns false results!!\\n\";\n    }\n```\n\nThen added to the total wrench which is in the after-joint-frame\n\n```\n#!c++\n  wrench = wrench - wrenchAppliedWorld;\n  }\n  else\n  {\n    // forgot to set provide_feedback?\n    gzwarn << \"GetForceTorque: forget to set <provide_feedback>?\\n\";\n  }\n  return wrench;\n```\n\nUsing getLocalAxis seems to solve the frame issue\n\n```\n#!c++\n// get force applied through SetForce\n    physics::JointWrench wrenchAppliedLocal;\n    if (this->HasType(physics::Base::HINGE_JOINT))\n    {\n      // rotate force into child link frame\n      wrenchAppliedLocal.body2Torque =\n        this->GetForce(0u) * this->GetLocalAxis(0u);\n      wrenchAppliedLocal.body1Torque = -wrenchAppliedLocal.body2Torque;\n    }\n    else if (this->HasType(physics::Base::SLIDER_JOINT))\n    {\n      // rotate force into child link frame\n      wrenchAppliedLocal.body2Force =\n        this->GetForce(0u) * this->GetLocalAxis(0u);\n      wrenchAppliedLocal.body1Force = -wrenchAppliedLocal.body2Force;\n    }\n    else\n    {\n      /// \\TODO: fix for multi-axis joints\n      gzerr << \"force torque for joint type [\" << this->GetType()\n            << \"] not implemented, returns false results!!\\n\";\n    }\n```\n\nAnd then subtract the wrenchAppliedLocal from the wrench in the after-joint-frame.\n\n```\n#!c++\n  wrench = wrench - wrenchAppliedLocal;\n  }\n  else\n  {\n    // forgot to set provide_feedback?\n    gzwarn << \"GetForceTorque: forget to set <provide_feedback>?\\n\";\n  }\n  return wrench;\n```\n", "markup": "markdown", "html": "<p>Rotating the test model by 90 degrees showed that world frame and after-joint-frame where mixed up in the force torque calculation. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;pose&gt;</span>0 0 0 0 0 1.57<span class=\"nt\">&lt;/pose&gt;</span>\n</pre></div>\n\n\n<p>In OdeJoint.cc the wrench due the joint forces is calculated in world frame:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// get force applied through SetForce</span>\n    <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">JointWrench</span> <span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">HasType</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">::</span><span class=\"n\">HINGE_JOINT</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// rotate force into child link frame</span>\n      <span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body2Torque</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetForce</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetGlobalAxis</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">);</span>\n      <span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body1Torque</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body2Torque</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">HasType</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">::</span><span class=\"n\">SLIDER_JOINT</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// rotate force into child link frame</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetGlobalAxis</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">);</span>\n      <span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body2Force</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetForce</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetGlobalAxis</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">);</span>\n      <span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body1Force</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body2Force</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">/// \\TODO: fix for multi-axis joints</span>\n      <span class=\"n\">gzerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;force torque for joint type [&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetType</span><span class=\"p\">()</span>\n            <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;] not implemented, returns false results!!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Then added to the total wrench which is in the after-joint-frame</p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"n\">wrench</span> <span class=\"o\">=</span> <span class=\"n\">wrench</span> <span class=\"o\">-</span> <span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span>\n  <span class=\"p\">{</span>\n    <span class=\"c1\">// forgot to set provide_feedback?</span>\n    <span class=\"n\">gzwarn</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;GetForceTorque: forget to set &lt;provide_feedback&gt;?</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">wrench</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Using getLocalAxis seems to solve the frame issue</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// get force applied through SetForce</span>\n    <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">JointWrench</span> <span class=\"n\">wrenchAppliedLocal</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">HasType</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">::</span><span class=\"n\">HINGE_JOINT</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// rotate force into child link frame</span>\n      <span class=\"n\">wrenchAppliedLocal</span><span class=\"p\">.</span><span class=\"n\">body2Torque</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetForce</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetLocalAxis</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">);</span>\n      <span class=\"n\">wrenchAppliedLocal</span><span class=\"p\">.</span><span class=\"n\">body1Torque</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">wrenchAppliedLocal</span><span class=\"p\">.</span><span class=\"n\">body2Torque</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">HasType</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">::</span><span class=\"n\">SLIDER_JOINT</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// rotate force into child link frame</span>\n      <span class=\"n\">wrenchAppliedLocal</span><span class=\"p\">.</span><span class=\"n\">body2Force</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetForce</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetLocalAxis</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">);</span>\n      <span class=\"n\">wrenchAppliedLocal</span><span class=\"p\">.</span><span class=\"n\">body1Force</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">wrenchAppliedLocal</span><span class=\"p\">.</span><span class=\"n\">body2Force</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">/// \\TODO: fix for multi-axis joints</span>\n      <span class=\"n\">gzerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;force torque for joint type [&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetType</span><span class=\"p\">()</span>\n            <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;] not implemented, returns false results!!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>And then subtract the wrenchAppliedLocal from the wrench in the after-joint-frame.</p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"n\">wrench</span> <span class=\"o\">=</span> <span class=\"n\">wrench</span> <span class=\"o\">-</span> <span class=\"n\">wrenchAppliedLocal</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span>\n  <span class=\"p\">{</span>\n    <span class=\"c1\">// forgot to set provide_feedback?</span>\n    <span class=\"n\">gzwarn</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;GetForceTorque: forget to set &lt;provide_feedback&gt;?</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">wrench</span><span class=\"p\">;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2013-04-16T19:56:34.028395+00:00", "user": {"display_name": "Jesper Smith", "uuid": "{61d9fe7d-e554-408c-99fb-faefa9c96114}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D"}, "html": {"href": "https://bitbucket.org/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/56b6560717cfbb0f4a2cc0af6e638650d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJS-4.png"}}, "nickname": "jespersmith", "type": "user", "account_id": "557058:2e842f1c-d9d5-48b1-88ae-5dd9e81a6f77"}, "updated_on": null, "type": "issue_comment", "id": 3770257}