{"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "links": {"attachments": {"href": "data/repositories/osrf/drcsim/issues/127/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/drcsim/issues/127.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/127/watch"}, "comments": {"href": "data/repositories/osrf/drcsim/issues/127/comments_page=1.json"}, "html": {"href": "#!/osrf/drcsim/issues/127/bad-joint_states-when-in-nominal-mode"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/drcsim/issues/127/vote"}}, "reporter": {"display_name": "Thomas Koletschka", "uuid": "{b33092ac-6376-48d1-9803-d9e6de445d1a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D"}, "html": {"href": "https://bitbucket.org/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D/"}, "avatar": {"href": "https://bitbucket.org/account/thomasko/avatar/"}}, "nickname": "thomasko", "type": "user", "account_id": null}, "title": "Bad joint_states when in Nominal mode", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Copied from [answers.gazebosim](http://answers.gazebosim.org/question/1370/major-drc-control-issue-bad-joint_states-when-in/), posted by pbeeson:\r\n\r\n\r\nWe have found a bug where if we keep the Atlas robot pinned, that joint_states reported are correct. however, when switched to Nominal mode (the default when launching Atlas in an empty world after 10 seconds or so), that joint_states starts sending incorrect values BUT it seems like the internal joint controller sees the correct values, so any kind of closed loop control cannot be performed correctly.\r\n\r\nTo Reproduce:\r\n\r\nMake a node that can sends a position to the neck joint through /atlas/joint_commands.\r\n\r\nLaunch atlas and watch /atlas/joint_states/positions[3] (the neck) start at 0, then after the robot becomes unpinned, it goes to -0.05 (or similar). Send the joint_command to ask the neck to return to 0. It doesn't (BECAUSE WE THINK IT BELIEVE INTERNALLY THAT IT IS ALREADY AT ZERO).\r\n\r\nNow, send the service message to repin Atlas, and watch the joint value go back to 0.\r\n\r\nWhile pinned, you can send the neck joint a new position goal, let's say 0.3. It will go there using the PID in the Gazebo plugin. Unpin the robot, and watch the value go to 0.25. So, because the joint_states for (AT LEAST) the neck joint are off by -0.05 radians, any closed loop control gets confused because it's always chasing this offset.", "markup": "markdown", "html": "<p>Copied from <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/1370/major-drc-control-issue-bad-joint_states-when-in/\" rel=\"nofollow\">answers.gazebosim</a>, posted by pbeeson:</p>\n<p>We have found a bug where if we keep the Atlas robot pinned, that joint_states reported are correct. however, when switched to Nominal mode (the default when launching Atlas in an empty world after 10 seconds or so), that joint_states starts sending incorrect values BUT it seems like the internal joint controller sees the correct values, so any kind of closed loop control cannot be performed correctly.</p>\n<p>To Reproduce:</p>\n<p>Make a node that can sends a position to the neck joint through /atlas/joint_commands.</p>\n<p>Launch atlas and watch /atlas/joint_states/positions[3] (the neck) start at 0, then after the robot becomes unpinned, it goes to -0.05 (or similar). Send the joint_command to ask the neck to return to 0. It doesn't (BECAUSE WE THINK IT BELIEVE INTERNALLY THAT IT IS ALREADY AT ZERO).</p>\n<p>Now, send the service message to repin Atlas, and watch the joint value go back to 0.</p>\n<p>While pinned, you can send the neck joint a new position goal, let's say 0.3. It will go there using the PID in the Gazebo plugin. Unpin the robot, and watch the value go to 0.25. So, because the joint_states for (AT LEAST) the neck joint are off by -0.05 radians, any closed loop control gets confused because it's always chasing this offset.</p>", "type": "rendered"}, "assignee": null, "state": "invalid", "version": null, "edited_on": null, "created_on": "2013-02-13T23:37:01.230243+00:00", "milestone": null, "updated_on": "2013-02-15T22:51:13.852863+00:00", "type": "issue", "id": 127}