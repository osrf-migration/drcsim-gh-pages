{"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/317/comments/5116693.json"}, "html": {"href": "#!/osrf/drcsim/issues/317#comment-5116693"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/drcsim/issues/317.json"}}, "type": "issue", "id": 317, "repository": {"links": {"self": {"href": "data/repositories/osrf/drcsim.json"}, "html": {"href": "#!/osrf/drcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{247b5408-ae91-4e3c-b2f9-a21994658d11}ts=c_plus_plus"}}, "type": "repository", "name": "drcsim", "full_name": "osrf/drcsim", "uuid": "{247b5408-ae91-4e3c-b2f9-a21994658d11}"}, "title": "Crash in UDPROS code"}, "content": {"raw": "For the VRC I essentially changed to TCP and it worked fine. The error message, when using UDPROS incorrectly indicates that we are using TCPROS.\n\nThe best way is controller synchronization during simulation to iron out any functionality / stability issues. For the VRC winners and interfacing to Atlas, I additionally recommend when running unsynchronized, a -frame missed- count that increments whenever an execution frame is missed. Execution frame time would essentially be the interval at which a low-level torque/joint command is expected. This interval would be based on the stability characteristics imposed by the closed loop dynamics. Such a counter would allow the Operator Control Unit to know how often frame times are not being met. One off missed frames are ok, especially when a new data packet of parameters etc. arrive and some processing is done. Consistent frame drops would become obvious and would need to be addressed.", "markup": "markdown", "html": "<p>For the VRC I essentially changed to TCP and it worked fine. The error message, when using UDPROS incorrectly indicates that we are using TCPROS.</p>\n<p>The best way is controller synchronization during simulation to iron out any functionality / stability issues. For the VRC winners and interfacing to Atlas, I additionally recommend when running unsynchronized, a -frame missed- count that increments whenever an execution frame is missed. Execution frame time would essentially be the interval at which a low-level torque/joint command is expected. This interval would be based on the stability characteristics imposed by the closed loop dynamics. Such a counter would allow the Operator Control Unit to know how often frame times are not being met. One off missed frames are ok, especially when a new data packet of parameters etc. arrive and some processing is done. Consistent frame drops would become obvious and would need to be addressed.</p>", "type": "rendered"}, "created_on": "2013-07-09T02:34:21.864344+00:00", "user": {"display_name": "Suresh Kannan", "uuid": "{33561fd8-bc72-4a5e-90f6-cd5b8d662cf0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B33561fd8-bc72-4a5e-90f6-cd5b8d662cf0%7D"}, "html": {"href": "https://bitbucket.org/%7B33561fd8-bc72-4a5e-90f6-cd5b8d662cf0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:78723516-86a9-4367-bb57-8e1c374dc238/56c080ae-be6d-4dd5-b870-9d8a401bcc25/128"}}, "nickname": "Suresh Kannan", "type": "user", "account_id": "557058:78723516-86a9-4367-bb57-8e1c374dc238"}, "updated_on": null, "type": "issue_comment", "id": 5116693}